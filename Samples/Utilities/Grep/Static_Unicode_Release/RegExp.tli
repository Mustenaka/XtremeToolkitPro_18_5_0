// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (6acb6be8).
//
// d:\svn\branch\toolkitpro\samples\utilities\grep\static_unicode_release\RegExp.tli
//
// Wrapper implementations for Win32 type library RegExp.tlb
// compiler-generated file created 08/05/18 at 05:28:32 - DO NOT EDIT!

#pragma once

//
// interface IRegExp wrapper method implementations
//

inline _bstr_t IRegExp::GetPattern ( ) {
    BSTR _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRegExp::PutPattern ( _bstr_t pPattern ) {
    HRESULT _hr = put_Pattern(pPattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRegExp::GetIgnoreCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRegExp::PutIgnoreCase ( VARIANT_BOOL pIgnoreCase ) {
    HRESULT _hr = put_IgnoreCase(pIgnoreCase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IRegExp::GetGlobal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Global(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRegExp::PutGlobal ( VARIANT_BOOL pGlobal ) {
    HRESULT _hr = put_Global(pGlobal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IRegExp::Execute ( _bstr_t sourceString ) {
    IDispatch * _result;
    HRESULT _hr = raw_Execute(sourceString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IRegExp::Test ( _bstr_t sourceString ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Test(sourceString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IRegExp::Replace ( _bstr_t sourceString, _bstr_t replaceString ) {
    BSTR _result;
    HRESULT _hr = raw_Replace(sourceString, replaceString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMatch wrapper method implementations
//

inline _bstr_t IMatch::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMatch::GetFirstIndex ( ) {
    long _result;
    HRESULT _hr = get_FirstIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMatch::GetLength ( ) {
    long _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMatchCollection wrapper method implementations
//

inline IDispatchPtr IMatchCollection::GetItem ( long index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IMatchCollection::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IMatchCollection::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}
